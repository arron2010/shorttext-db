// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sequence_rpc.proto

package filedb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("sequence_rpc.proto", fileDescriptor_e2960b29652cb80b) }

var fileDescriptor_e2960b29652cb80b = []byte{
	// 104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0x8d, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x4b, 0xcb, 0xcc, 0x49, 0x4d, 0x49, 0x92, 0xe2, 0x83, 0xc9, 0x41, 0xc4, 0x8d, 0x8a, 0xb9, 0x38,
	0x82, 0xa1, 0x22, 0x42, 0x46, 0x5c, 0x2c, 0x7e, 0xa9, 0x15, 0x25, 0x42, 0xc2, 0x7a, 0x10, 0xc5,
	0x7a, 0x30, 0x19, 0xdf, 0xe2, 0x74, 0x29, 0x6c, 0x82, 0x4a, 0x0c, 0x42, 0xc6, 0x5c, 0xac, 0xc1,
	0x25, 0x89, 0x45, 0x24, 0x69, 0x4a, 0x62, 0x03, 0xdb, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x4b, 0xf9, 0xc4, 0xe8, 0xa9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SequenceClient is the client API for Sequence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequenceClient interface {
	Next(ctx context.Context, in *SequenceMsg, opts ...grpc.CallOption) (*SequenceMsg, error)
	Start(ctx context.Context, in *SequenceMsg, opts ...grpc.CallOption) (*SequenceMsg, error)
}

type sequenceClient struct {
	cc *grpc.ClientConn
}

func NewSequenceClient(cc *grpc.ClientConn) SequenceClient {
	return &sequenceClient{cc}
}

func (c *sequenceClient) Next(ctx context.Context, in *SequenceMsg, opts ...grpc.CallOption) (*SequenceMsg, error) {
	out := new(SequenceMsg)
	err := c.cc.Invoke(ctx, "/filedb.Sequence/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceClient) Start(ctx context.Context, in *SequenceMsg, opts ...grpc.CallOption) (*SequenceMsg, error) {
	out := new(SequenceMsg)
	err := c.cc.Invoke(ctx, "/filedb.Sequence/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequenceServer is the server API for Sequence service.
type SequenceServer interface {
	Next(context.Context, *SequenceMsg) (*SequenceMsg, error)
	Start(context.Context, *SequenceMsg) (*SequenceMsg, error)
}

func RegisterSequenceServer(s *grpc.Server, srv SequenceServer) {
	s.RegisterService(&_Sequence_serviceDesc, srv)
}

func _Sequence_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filedb.Sequence/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).Next(ctx, req.(*SequenceMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sequence_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filedb.Sequence/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).Start(ctx, req.(*SequenceMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sequence_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filedb.Sequence",
	HandlerType: (*SequenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Next",
			Handler:    _Sequence_Next_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Sequence_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequence_rpc.proto",
}
