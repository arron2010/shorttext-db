// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamproxy.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("streamproxy.proto", fileDescriptor_9e9ed750d78acbc2) }

var fileDescriptor_9e9ed750d78acbc2 = []byte{
	// 105 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0x2d, 0x28, 0xca, 0xaf, 0xa8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf,
	0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0x96, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x85,
	0x88, 0x1b, 0xb9, 0x72, 0x71, 0x07, 0x83, 0x15, 0x07, 0x80, 0x14, 0x0b, 0x99, 0x71, 0xb1, 0x04,
	0xa7, 0xe6, 0xa5, 0x08, 0x89, 0xea, 0x41, 0xd5, 0xeb, 0x39, 0x25, 0x96, 0x24, 0x67, 0xf8, 0x42,
	0xf4, 0x48, 0x61, 0x17, 0x56, 0x62, 0x48, 0x62, 0x03, 0x9b, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x98, 0xfe, 0xe6, 0x47, 0x7a, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamProxyClient is the client API for StreamProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamProxyClient interface {
	Send(ctx context.Context, in *BatchMessage, opts ...grpc.CallOption) (*BatchMessage, error)
}

type streamProxyClient struct {
	cc *grpc.ClientConn
}

func NewStreamProxyClient(cc *grpc.ClientConn) StreamProxyClient {
	return &streamProxyClient{cc}
}

func (c *streamProxyClient) Send(ctx context.Context, in *BatchMessage, opts ...grpc.CallOption) (*BatchMessage, error) {
	out := new(BatchMessage)
	err := c.cc.Invoke(ctx, "/network.StreamProxy/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamProxyServer is the server API for StreamProxy service.
type StreamProxyServer interface {
	Send(context.Context, *BatchMessage) (*BatchMessage, error)
}

func RegisterStreamProxyServer(s *grpc.Server, srv StreamProxyServer) {
	s.RegisterService(&_StreamProxy_serviceDesc, srv)
}

func _StreamProxy_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamProxyServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.StreamProxy/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamProxyServer).Send(ctx, req.(*BatchMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.StreamProxy",
	HandlerType: (*StreamProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _StreamProxy_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streamproxy.proto",
}
